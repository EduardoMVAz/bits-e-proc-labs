-- File: toplevel.vhd
-- Generated by MyHDL 0.11
-- Date: Wed Jul 13 19:58:19 2022


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_011.all;

entity toplevel is
    port (
        LEDR: out unsigned(9 downto 0);
        SW: in unsigned(9 downto 0);
        KEY: in unsigned(3 downto 0);
        HEX0: out unsigned(6 downto 0);
        HEX1: in unsigned(6 downto 0);
        HEX2: in unsigned(6 downto 0);
        HEX3: in unsigned(6 downto 0);
        HEX4: in unsigned(6 downto 0);
        HEX5: in unsigned(6 downto 0)
    );
end entity toplevel;


architecture MyHDL of toplevel is



signal ledr_bin: unsigned(9 downto 0);
type t_array_ledr_s is array(0 to 10-1) of std_logic;
signal ledr_s: t_array_ledr_s;
type t_array_adder0_c is array(0 to 5-1) of std_logic;
signal adder0_c: t_array_adder0_c;
type t_array_adder0_fullAdder0_s is array(0 to 3-1) of std_logic;
signal adder0_fullAdder0_s: t_array_adder0_fullAdder0_s;
type t_array_adder0_fullAdder1_s is array(0 to 3-1) of std_logic;
signal adder0_fullAdder1_s: t_array_adder0_fullAdder1_s;
type t_array_adder0_fullAdder2_s is array(0 to 3-1) of std_logic;
signal adder0_fullAdder2_s: t_array_adder0_fullAdder2_s;
type t_array_adder0_fullAdder3_s is array(0 to 3-1) of std_logic;
signal adder0_fullAdder3_s: t_array_adder0_fullAdder3_s;

begin



ledr_bin(9) <= ledr_s(9);
ledr_bin(8) <= ledr_s(8);
ledr_bin(7) <= ledr_s(7);
ledr_bin(6) <= ledr_s(6);
ledr_bin(5) <= ledr_s(5);
ledr_bin(4) <= ledr_s(4);
ledr_bin(3) <= ledr_s(3);
ledr_bin(2) <= ledr_s(2);
ledr_bin(1) <= ledr_s(1);
ledr_bin(0) <= ledr_s(0);


adder0_fullAdder0_s(0) <= (SW(0) xor SW(6));
adder0_fullAdder0_s(1) <= (SW(0) and SW(6));


ledr_s(0) <= (adder0_c(0) xor adder0_fullAdder0_s(0));
adder0_fullAdder0_s(2) <= (adder0_c(0) and adder0_fullAdder0_s(0));


adder0_c(1) <= (adder0_fullAdder0_s(1) or adder0_fullAdder0_s(2));


adder0_fullAdder1_s(0) <= (SW(1) xor SW(7));
adder0_fullAdder1_s(1) <= (SW(1) and SW(7));


ledr_s(1) <= (adder0_c(1) xor adder0_fullAdder1_s(0));
adder0_fullAdder1_s(2) <= (adder0_c(1) and adder0_fullAdder1_s(0));


adder0_c(2) <= (adder0_fullAdder1_s(1) or adder0_fullAdder1_s(2));


adder0_fullAdder2_s(0) <= (SW(2) xor SW(8));
adder0_fullAdder2_s(1) <= (SW(2) and SW(8));


ledr_s(2) <= (adder0_c(2) xor adder0_fullAdder2_s(0));
adder0_fullAdder2_s(2) <= (adder0_c(2) and adder0_fullAdder2_s(0));


adder0_c(3) <= (adder0_fullAdder2_s(1) or adder0_fullAdder2_s(2));


adder0_fullAdder3_s(0) <= (SW(3) xor SW(9));
adder0_fullAdder3_s(1) <= (SW(3) and SW(9));


ledr_s(3) <= (adder0_c(3) xor adder0_fullAdder3_s(0));
adder0_fullAdder3_s(2) <= (adder0_c(3) and adder0_fullAdder3_s(0));


adder0_c(4) <= (adder0_fullAdder3_s(1) or adder0_fullAdder3_s(2));


ledr_s(9) <= adder0_c(4);

TOPLEVEL_BIN2HEX0_COMB: process (ledr_bin) is
begin
    if (ledr_bin(4-1 downto 0) = 0) then
        HEX0 <= unsigned'("1000000");
    elsif (ledr_bin(4-1 downto 0) = 1) then
        HEX0 <= unsigned'("1111001");
    elsif (ledr_bin(4-1 downto 0) = 2) then
        HEX0 <= unsigned'("0100100");
    elsif (ledr_bin(4-1 downto 0) = 3) then
        HEX0 <= unsigned'("0110000");
    elsif (ledr_bin(4-1 downto 0) = 4) then
        HEX0 <= unsigned'("0011001");
    elsif (ledr_bin(4-1 downto 0) = 5) then
        HEX0 <= unsigned'("0010010");
    elsif (ledr_bin(4-1 downto 0) = 6) then
        HEX0 <= unsigned'("0000010");
    elsif (ledr_bin(4-1 downto 0) = 7) then
        HEX0 <= unsigned'("1111000");
    elsif (ledr_bin(4-1 downto 0) = 8) then
        HEX0 <= unsigned'("0000000");
    elsif (ledr_bin(4-1 downto 0) = 9) then
        HEX0 <= unsigned'("0011000");
    elsif (ledr_bin(4-1 downto 0) = 10) then
        HEX0 <= unsigned'("0001000");
    elsif (ledr_bin(4-1 downto 0) = 11) then
        HEX0 <= unsigned'("0000011");
    elsif (ledr_bin(4-1 downto 0) = 12) then
        HEX0 <= unsigned'("1000110");
    elsif (ledr_bin(4-1 downto 0) = 13) then
        HEX0 <= unsigned'("0100001");
    elsif (ledr_bin(4-1 downto 0) = 14) then
        HEX0 <= unsigned'("0000110");
    else
        HEX0 <= unsigned'("0001110");
    end if;
end process TOPLEVEL_BIN2HEX0_COMB;

TOPLEVEL_COMB: process (ledr_s) is
begin
    for i in 0 to 10-1 loop
        LEDR(i) <= ledr_s(i);
    end loop;
end process TOPLEVEL_COMB;

end architecture MyHDL;
